

class KPIRecord {
  constructor(id, section, kpi, detail) {
    this.id = id;
    this.section = section;
    this.kpi = kpi;
    this.detail = detail;
    this.days = []; // Sẽ là array of objects {dateKey, metrics: {value}}
    this.luyKe = 0;
  }

  /**
   * Chuyển mảng số thành format {dateKey, metrics: {value}}
   */
  formatDaysToObjects(dayValues, month, year) {
    return dayValues.map((value, index) => {
      const day = index + 1;
      const dateKey = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      return {
        dateKey: dateKey,
        metrics: {
          value: value
        }
      };
    });
  }


  toObject() {
    return {
      id: this.id,
      section: this.section,
      kpi: this.kpi,
      detail: this.detail,
      luyKe: this.luyKe,
      days: JSON.stringify(this.days), 
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }
}

/**
 * Class cho KPI tự động sinh ngẫu nhiên
 */
class AutoGeneratedKPIRecord extends KPIRecord {
  constructor(id, section, kpi, detail, calculateLuyKeFunc, min = 0, max = 100, month = new Date().getMonth() + 1, year = new Date().getFullYear()) {
    super(id, section, kpi, detail);
    
    // Sinh giá trị ngẫu nhiên cho các ngày trong tháng
    const dayValues = this.generateRandomDays(month, year, min, max);
    
    // Chuyển sang format {dateKey, metrics: {value}}
    this.days = this.formatDaysToObjects(dayValues, month, year);
    
    // Tính lũy kế từ mảng giá trị
    this.luyKe = calculateLuyKeFunc(dayValues);
  }

  /**
   * Sinh mảng giá trị ngẫu nhiên cho các ngày trong tháng
   */
  generateRandomDays(month, year, min, max) {
    const daysInMonth = new Date(year, month, 0).getDate();
    const days = [];
    
    for (let i = 0; i < daysInMonth; i++) {
      const randomValue = Math.floor(Math.random() * (max - min + 1)) + min;
      days.push(randomValue);
    }
    
    return days;
  }
}

/**
 * Class cho KPI tính theo công thức
 */
class ProcessedKPIRecord extends KPIRecord {
  constructor(id, section, kpi, detail, dayData, calculateDayFunc, luyKeData, calculateLuyKeFunc, month = new Date().getMonth() + 1, year = new Date().getFullYear()) {
    super(id, section, kpi, detail);
    
    // Tính giá trị cho các ngày dựa trên công thức (trả về mảng số)
    const dayValues = calculateDayFunc(dayData);
    
    // Chuyển sang format {dateKey, metrics: {value}}
    this.days = this.formatDaysToObjects(dayValues, month, year);
    
    // Tính lũy kế dựa trên công thức
    this.luyKe = calculateLuyKeFunc(luyKeData);
  }
}

/**
 * Các hàm tính lũy kế phổ biến
 */

// Tính tổng các ngày
const sumDays = (days) => {
  return days.reduce((sum, value) => sum + value, 0);
};

// Tính trung bình các ngày
const averageDays = (days) => {
  if (days.length === 0) return 0;
  return Math.round(sumDays(days) / days.length);
};

// Lấy giá trị cuối cùng
const lastDay = (days) => {
  return days.length > 0 ? days[days.length - 1] : 0;
};

/**
 * Các hàm tính toán cho KPI theo công thức
 */

// Tính tỷ lệ phần trăm cho từng ngày (thực tế / kế hoạch * 100)
const calculateRatioGeneral = ([actualDays, planDays]) => {
  return actualDays.map((actual, index) => {
    const plan = planDays[index];
    if (plan === 0) return 0;
    return Math.round((actual / plan) * 100);
  });
};

// Tính tỷ lệ phần trăm lũy kế (thực tế / kế hoạch * 100)
const calculateRatio = ([actualLuyKe, planLuyKe]) => {
  if (planLuyKe === 0) return 0;
  return Math.round((actualLuyKe / planLuyKe) * 100);
};

// Tính hiệu (số 1 - số 2) cho từng ngày
const calculateDifference = ([days1, days2]) => {
  return days1.map((val1, index) => val1 - days2[index]);
};

// Tính hiệu lũy kế
const calculateDifferenceLuyKe = ([luyKe1, luyKe2]) => {
  return luyKe1 - luyKe2;
};

// Tính tổng nhiều mảng ngày
const calculateSumMultiple = (dayArrays) => {
  if (dayArrays.length === 0) return [];
  
  const result = [];
  const length = dayArrays[0].length;
  
  for (let i = 0; i < length; i++) {
    let sum = 0;
    dayArrays.forEach(days => {
      sum += days[i] || 0;
    });
    result.push(sum);
  }
  
  return result;
};

// Tính tổng lũy kế từ nhiều lũy kế
const calculateSumMultipleLuyKe = (luyKeArray) => {
  return luyKeArray.reduce((sum, val) => sum + val, 0);
};

/**
 * Helper function để extract mảng giá trị từ days objects
 * Dùng khi cần lấy giá trị từ KPI đã tạo để tính toán cho KPI khác
 */
const extractDayValues = (daysObjects) => {
  return daysObjects.map(day => day.metrics.value);
};

module.exports = {
  KPIRecord,
  AutoGeneratedKPIRecord,
  ProcessedKPIRecord,
  // Hàm tính lũy kế
  sumDays,
  averageDays,
  lastDay,
  // Hàm tính toán công thức
  calculateRatioGeneral,
  calculateRatio,
  calculateDifference,
  calculateDifferenceLuyKe,
  calculateSumMultiple,
  calculateSumMultipleLuyKe,
  // Helper
  extractDayValues
};